#!/bin/zsh

if [ $# = 0 ]; then
	set -- -e $'   #hel \tlo\n  #  hi\n
#; O + 1 2 O 3
# ; OUTPUT (; & 0 1 "A") OUTPUT 3
; = foo 3
; = bar + foo 9
; = c - bar foo
; = c - bar foo
; = c - bar c
: OUTPUT c
';

	set -- -e ' + 3 D ? T "abc" "abcd"'
fi


# the `X__END__` is needed so sed knows where the program stops; we can't use the entire STDIN, as
# the `PROMPT` command access it too.

# TODO: `cat`won't print out a newline on its own.
output=$(< <(printf "%s\nX__END__\n" "$2"; cat 2>/dev/null; printf 'X\x19__EOF__') \
	sed -nEf =(cat ./knight.sed | sed \
	-e $'s/`VARS`/\x12/g' \
	-e $'s/`NL`/\x13/g' \
	-e $'s/`PS`/\x14/g' \
	-e $'s/`NXT`/\x15/g' \
	-e $'s/`CUR`/\x16/g' \
	-e $'s/`DFR`/\x17/g' \
	-e $'s/`VSEP`/\x18/g' \
	-e $'s/`CR`/\r/g' \
	-e $'s/`END_OF_INPUT`/\x19/g' \
	) \
| sed -e 's/\\022/`VARS`/g' \
		-e 's/\\023/<\\n>/g' \
		-e 's/\\024/|/g' \
		-e 's/\\025/N/g' \
		-e 's/\\026/C/g' \
		-e 's/\\027/_/g' \
		-e 's/\\030/`VSEP`/g' \
		-e 's/\\031/`END_OF_INPUT`/g' \
)
printf %s "$output" | sed '$d' | ruby -ne'print $x; $x = $_; END{print $x.chomp}'
# exit "$(printf %s "$output" | sed -nE '$!d;/X__EXIT_STATUS: ([0-9]+)/{s//\1/p;q;};l')"
